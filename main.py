import discord
from discord.ext import commands
import aiohttp
import asyncio
import json
import random
import string
import datetime
from github import Github
import os

# ===============================
# üöÄ CONFIG CHO RAILWAY
# ===============================
print("üöÑ ƒêang kh·ªüi ƒë·ªông tr√™n Railway...")

# C·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
GITHUB_REPO = os.getenv('GITHUB_REPO', 'cacdai1234/AIMBOTLOAD-APIKEY')
JSON_FILE_PATH = os.getenv('JSON_FILE_PATH', 'auth-data.json')
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '1395096403017072660,1395096403017072660').split(',')]

# Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if not DISCORD_TOKEN:
    print("‚ùå L·ªñI: DISCORD_TOKEN kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!")
    exit(1)

if not GITHUB_TOKEN:
    print("‚ùå L·ªñI: GITHUB_TOKEN kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y!")
    exit(1)

print("‚úÖ ƒê√£ load t·∫•t c·∫£ environment variables")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

class KeyManager:
    def __init__(self, github_token, repo_name):
        self.g = Github(github_token)
        self.repo = self.g.get_repo(repo_name)
    
    def generate_key(self, length=16):
        """T·∫°o key ng·∫´u nhi√™n"""
        chars = string.ascii_uppercase + string.digits
        return ''.join(random.choice(chars) for _ in range(length))
    
    async def get_current_json(self):
        """L·∫•y n·ªôi dung JSON hi·ªán t·∫°i t·ª´ GitHub"""
        try:
            contents = self.repo.get_contents(JSON_FILE_PATH)
            current_data = json.loads(contents.decoded_content.decode())
            return current_data
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi get JSON: {e}")
            return []
    
    async def update_json(self, new_data):
        """C·∫≠p nh·∫≠t JSON l√™n GitHub"""
        try:
            contents = self.repo.get_contents(JSON_FILE_PATH)
            new_json = json.dumps(new_data, indent=2, ensure_ascii=False)
            self.repo.update_file(contents.path, "Update keys", new_json, contents.sha)
            return True
        except Exception as e:
            print(f"‚ùå L·ªói update GitHub: {e}")
            return False
    
    def calculate_expiry_date(self, days=30):
        """T√≠nh ng√†y h·∫øt h·∫°n"""
        return (datetime.datetime.utcnow() + datetime.timedelta(days=days)).isoformat()
    
    def get_expired_keys(self, keys_data):
        """L·∫•y danh s√°ch key ƒë√£ h·∫øt h·∫°n"""
        now = datetime.datetime.utcnow()
        expired_keys = []
        
        for key in keys_data:
            if key.get('expires'):
                expiry_date = datetime.datetime.fromisoformat(key['expires'].replace('Z', ''))
                if expiry_date < now:
                    expired_keys.append(key)
        
        return expired_keys

@bot.event
async def on_ready():
    print(f'‚úÖ Bot {bot.user} ƒë√£ s·∫µn s√†ng tr√™n Railway!')
    print(f'üÜî Bot ID: {bot.user.id}')
    print(f'üë• S·ªë server: {len(bot.guilds)}')
    print(f'üöÑ ƒêang ch·∫°y tr√™n Railway - 24/7!')
    print(f'‚è∞ Start time: {datetime.datetime.now()}')
    
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="!menu | Railway 24/7"))

def is_admin():
    """Check xem user c√≥ ph·∫£i admin kh√¥ng"""
    async def predicate(ctx):
        return ctx.author.id in ADMIN_IDS
    return commands.check(predicate)

# ===============================
# üéØ L·ªÜNH T·∫†O KEY
# ===============================

@bot.command()
@is_admin()
async def taokey(ctx, key_type: str, amount: int = 1, days: int = 30):
    """T·∫°o key v·ªõi lo·∫°i v√† s·ªë l∆∞·ª£ng t√πy ch·ªçn"""
    valid_types = ["single", "multi", "unlimited"]
    
    if key_type.lower() not in valid_types:
        await ctx.send(f"‚ùå Lo·∫°i key kh√¥ng h·ª£p l·ªá! Ch·ªçn: {', '.join(valid_types)}")
        return
    
    await ctx.send(f"üîÑ ƒêang t·∫°o {amount} key {key_type}...")
    
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    new_keys = []
    for i in range(amount):
        new_key = {
            "key": manager.generate_key(),
            "hwid": "",
            "type": key_type,
            "expires": manager.calculate_expiry_date(days) if key_type != "unlimited" else None
        }
        
        if key_type == "unlimited":
            new_key["unlimited"] = True
        
        new_keys.append(new_key)
        current_data.append(new_key)
    
    if await manager.update_json(current_data):
        embed = discord.Embed(title="‚úÖ T·∫°o Keys Th√†nh C√¥ng", color=0x00ff00)
        embed.add_field(name="S·ªë l∆∞·ª£ng", value=f"{amount} keys", inline=True)
        embed.add_field(name="Lo·∫°i", value=key_type.capitalize(), inline=True)
        if key_type != "unlimited":
            embed.add_field(name="H·∫°n", value=f"{days} ng√†y", inline=True)
        
        keys_list = "\n".join([f"`{key['key']}`" for key in new_keys[:3]])
        if len(new_keys) > 3:
            keys_list += f"\n... v√† {len(new_keys) - 3} keys kh√°c"
        
        embed.add_field(name="Keys ƒë√£ t·∫°o", value=keys_list, inline=False)
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå L·ªói khi t·∫°o keys!")

# ===============================
# üóëÔ∏è L·ªÜNH X√ìA KEY
# ===============================

@bot.command()
@is_admin()
async def xoakey(ctx, *keys):
    """X√≥a m·ªôt ho·∫∑c nhi·ªÅu key kh·ªèi h·ªá th·ªëng"""
    if not keys:
        await ctx.send("üìù **H∆∞·ªõng d·∫´n x√≥a nhi·ªÅu key:**\n"
                      "C√°ch 1: `!xoakey KEY1 KEY2 KEY3` (c√°ch nhau b·∫±ng kho·∫£ng tr·∫Øng)\n"
                      "C√°ch 2: G·ª≠i danh s√°ch keys (m·ªói key m·ªôt d√≤ng) sau khi g√µ l·ªánh:\n"
                      "```\nKEY1\nKEY2\nKEY3\n...\n```\n"
                      "G·ª≠i `h·ªßy` ƒë·ªÉ h·ªßy b·ªè.")
        
        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel
        
        try:
            msg = await bot.wait_for('message', timeout=60.0, check=check)
            
            if msg.content.lower() == 'h·ªßy':
                await ctx.send("‚ùå ƒê√£ h·ªßy thao t√°c x√≥a key.")
                return
            
            keys = [key.strip() for key in msg.content.split('\n') if key.strip()]
            
            if not keys:
                await ctx.send("‚ùå Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c cung c·∫•p!")
                return
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ H·∫øt th·ªùi gian nh·∫≠p danh s√°ch key!")
            return
    
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    if not current_data:
        await ctx.send("üì≠ Kh√¥ng c√≥ key n√†o trong h·ªá th·ªëng!")
        return
    
    deleted_keys = []
    not_found_keys = []
    new_data = []
    
    for key_obj in current_data:
        if key_obj['key'] in keys:
            deleted_keys.append(key_obj['key'])
        else:
            new_data.append(key_obj)
    
    for key in keys:
        if key not in deleted_keys:
            not_found_keys.append(key)
    
    if not deleted_keys:
        await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y key n√†o ƒë·ªÉ x√≥a!")
        return
    
    if len(deleted_keys) > 3:
        embed = discord.Embed(title="‚ö†Ô∏è X√ÅC NH·∫¨N X√ìA NHI·ªÄU KEY", color=0xffa500)
        embed.add_field(name="S·ªë key s·∫Ω x√≥a", value=f"**{len(deleted_keys)}** keys", inline=False)
        embed.add_field(name="Danh s√°ch key", value="\n".join([f"`{key}`" for key in deleted_keys[:10]]), inline=False)
        if len(deleted_keys) > 10:
            embed.add_field(name="...", value=f"v√† {len(deleted_keys) - 10} keys kh√°c", inline=False)
        embed.add_field(name="X√°c nh·∫≠n", value="React v·ªõi ‚úÖ ƒë·ªÉ x√≥a, ‚ùå ƒë·ªÉ h·ªßy", inline=False)
        
        confirm_msg = await ctx.send(embed=embed)
        await confirm_msg.add_reaction("‚úÖ")
        await confirm_msg.add_reaction("‚ùå")
        
        def reaction_check(reaction, user):
            return user == ctx.author and str(reaction.emoji) in ["‚úÖ", "‚ùå"] and reaction.message.id == confirm_msg.id
        
        try:
            reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=reaction_check)
            
            if str(reaction.emoji) != "‚úÖ":
                embed_cancel = discord.Embed(title="‚ùå ƒê√£ H·ªßy", color=0xff0000)
                embed_cancel.add_field(name="Thao t√°c", value="ƒê√£ h·ªßy x√≥a key", inline=False)
                await confirm_msg.edit(embed=embed_cancel)
                await confirm_msg.clear_reactions()
                return
            else:
                await confirm_msg.delete()
        except asyncio.TimeoutError:
            await confirm_msg.delete()
            await ctx.send("‚è∞ H·∫øt th·ªùi gian x√°c nh·∫≠n!")
            return
    
    if await manager.update_json(new_data):
        embed_success = discord.Embed(title="‚úÖ X√≥a Key Th√†nh C√¥ng", color=0x00ff00)
        embed_success.add_field(name="ƒê√£ x√≥a", value=f"**{len(deleted_keys)}** keys", inline=True)
        
        if not_found_keys:
            embed_success.add_field(name="Kh√¥ng t√¨m th·∫•y", value=f"**{len(not_found_keys)}** keys", inline=True)
        
        if deleted_keys:
            keys_display = "\n".join([f"`{key}`" for key in deleted_keys[:8]])
            if len(deleted_keys) > 8:
                keys_display += f"\n... v√† {len(deleted_keys) - 8} keys kh√°c"
            embed_success.add_field(name="Keys ƒë√£ x√≥a", value=keys_display, inline=False)
        
        if not_found_keys:
            not_found_display = "\n".join([f"`{key}`" for key in not_found_keys[:5]])
            if len(not_found_keys) > 5:
                not_found_display += f"\n... v√† {len(not_found_keys) - 5} keys kh√°c"
            embed_success.add_field(name="Keys kh√¥ng t·ªìn t·∫°i", value=not_found_display, inline=False)
        
        await ctx.send(embed=embed_success)
    else:
        await ctx.send("‚ùå L·ªói khi x√≥a key!")

# ===============================
# üîÑ RESET HWID
# ===============================

@bot.command()
@is_admin()
async def resetHWID(ctx, key: str):
    """Reset HWID cho key (d√πng khi user ƒë·ªïi m√°y)"""
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    key_found = False
    for k in current_data:
        if k['key'] == key:
            if k['type'] != 'single':
                await ctx.send("‚ùå Ch·ªâ c√≥ th·ªÉ reset HWID cho key single!")
                return
            
            old_hwid = k['hwid']
            k['hwid'] = ""  # Reset HWID v·ªÅ tr·ªëng
            key_found = True
            break
    
    if not key_found:
        await ctx.send("‚ùå Key kh√¥ng t·ªìn t·∫°i!")
        return
    
    if await manager.update_json(current_data):
        embed = discord.Embed(title="‚úÖ Reset HWID Th√†nh C√¥ng", color=0x00ff00)
        embed.add_field(name="Key", value=f"`{key}`", inline=False)
        embed.add_field(name="HWID c≈©", value=f"`{old_hwid if old_hwid else 'Tr·ªëng'}`", inline=True)
        embed.add_field(name="HWID m·ªõi", value="`Tr·ªëng` (ch∆∞a k√≠ch ho·∫°t)", inline=True)
        embed.add_field(name="üìù L∆∞u √Ω", value="Key ƒë√£ ƒë∆∞·ª£c reset v√† c√≥ th·ªÉ k√≠ch ho·∫°t l·∫°i tr√™n m√°y m·ªõi", inline=False)
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå L·ªói khi reset HWID!")

# ===============================
# üë• QU·∫¢N L√ù ADMIN
# ===============================

@bot.command()
@is_admin()
async def themuser(ctx, user_id: str):
    """Th√™m user v√†o danh s√°ch admin"""
    try:
        user_id_int = int(user_id)
    except ValueError:
        await ctx.send("‚ùå ID user kh√¥ng h·ª£p l·ªá!")
        return
    
    if user_id_int in ADMIN_IDS:
        await ctx.send("‚ùå User ƒë√£ c√≥ trong danh s√°ch admin!")
        return
    
    # Th√™m user m·ªõi v√†o ADMIN_IDS
    ADMIN_IDS.append(user_id_int)
    
    embed = discord.Embed(title="‚úÖ Th√™m User Admin Th√†nh C√¥ng", color=0x00ff00)
    embed.add_field(name="User ID", value=f"`{user_id_int}`", inline=False)
    embed.add_field(name="T·ªïng s·ªë admin", value=f"**{len(ADMIN_IDS)}** users", inline=True)
    embed.add_field(name="üìù L∆∞u √Ω", value="Thay ƒë·ªïi n√†y c√≥ hi·ªáu l·ª±c ngay l·∫≠p t·ª©c", inline=False)
    
    await ctx.send(embed=embed)

@bot.command()
@is_admin()
async def xoauser(ctx, user_id: str):
    """X√≥a user kh·ªèi danh s√°ch admin"""
    try:
        user_id_int = int(user_id)
    except ValueError:
        await ctx.send("‚ùå ID user kh√¥ng h·ª£p l·ªá!")
        return
    
    if user_id_int not in ADMIN_IDS:
        await ctx.send("‚ùå User kh√¥ng c√≥ trong danh s√°ch admin!")
        return
    
    if len(ADMIN_IDS) <= 1:
        await ctx.send("‚ùå Kh√¥ng th·ªÉ x√≥a admin cu·ªëi c√πng!")
        return
    
    if user_id_int == ctx.author.id:
        await ctx.send("‚ùå B·∫°n kh√¥ng th·ªÉ t·ª± x√≥a ch√≠nh m√¨nh!")
        return
    
    # X√≥a user kh·ªèi ADMIN_IDS
    ADMIN_IDS.remove(user_id_int)
    
    embed = discord.Embed(title="‚úÖ X√≥a User Admin Th√†nh C√¥ng", color=0x00ff00)
    embed.add_field(name="User ID", value=f"`{user_id_int}`", inline=False)
    embed.add_field(name="T·ªïng s·ªë admin", value=f"**{len(ADMIN_IDS)}** users", inline=True)
    
    await ctx.send(embed=embed)

@bot.command()
@is_admin()
async def danhsachuser(ctx):
    """Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ admin"""
    embed = discord.Embed(title="üë• Danh S√°ch Admin", color=0x7289da)
    
    user_list = []
    for user_id in ADMIN_IDS:
        try:
            user = await bot.fetch_user(user_id)
            user_info = f"`{user_id}` - {user.name}#{user.discriminator}"
            if user_id == ctx.author.id:
                user_info += " üëà (B·∫°n)"
            user_list.append(user_info)
        except:
            user_list.append(f"`{user_id}` - Kh√¥ng t√¨m th·∫•y user")
    
    embed.add_field(name="T·ªïng s·ªë admin", value=f"**{len(ADMIN_IDS)}** users", inline=False)
    embed.add_field(name="Danh s√°ch", value="\n".join(user_list), inline=False)
    
    await ctx.send(embed=embed)

# ===============================
# üìÖ GIA H·∫†N KEY
# ===============================

@bot.command()
@is_admin()
async def giahankey(ctx, key: str, them_ngay: int):
    """Gia h·∫°n th√™m ng√†y cho key"""
    if them_ngay <= 0:
        await ctx.send("‚ùå S·ªë ng√†y gia h·∫°n ph·∫£i l·ªõn h∆°n 0!")
        return
    
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    key_found = False
    for k in current_data:
        if k['key'] == key:
            if k.get('unlimited'):
                await ctx.send("‚ùå Key unlimited kh√¥ng th·ªÉ gia h·∫°n!")
                return
            
            if not k.get('expires'):
                await ctx.send("‚ùå Key n√†y kh√¥ng c√≥ th·ªùi h·∫°n!")
                return
            
            # T√≠nh ng√†y h·∫øt h·∫°n m·ªõi
            old_expiry = datetime.datetime.fromisoformat(k['expires'].replace('Z', ''))
            new_expiry = old_expiry + datetime.timedelta(days=them_ngay)
            k['expires'] = new_expiry.isoformat()
            
            days_left = (new_expiry - datetime.datetime.utcnow()).days
            key_found = True
            break
    
    if not key_found:
        await ctx.send("‚ùå Key kh√¥ng t·ªìn t·∫°i!")
        return
    
    if await manager.update_json(current_data):
        embed = discord.Embed(title="‚úÖ Gia H·∫°n Key Th√†nh C√¥ng", color=0x00ff00)
        embed.add_field(name="Key", value=f"`{key}`", inline=False)
        embed.add_field(name="Th√™m ng√†y", value=f"**+{them_ngay}** ng√†y", inline=True)
        embed.add_field(name="T·ªïng ng√†y c√≤n l·∫°i", value=f"**{days_left}** ng√†y", inline=True)
        embed.add_field(name="H·∫øt h·∫°n v√†o", value=new_expiry.strftime("%d/%m/%Y %H:%M UTC"), inline=False)
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå L·ªói khi gia h·∫°n key!")

# ===============================
# üóëÔ∏è X√ìA KEY H·∫æT H·∫†N
# ===============================

@bot.command()
@is_admin()
async def xoakeyhethan(ctx):
    """X√≥a t·∫•t c·∫£ key ƒë√£ h·∫øt h·∫°n"""
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    if not current_data:
        await ctx.send("üì≠ Kh√¥ng c√≥ key n√†o trong h·ªá th·ªëng!")
        return
    
    expired_keys = manager.get_expired_keys(current_data)
    
    if not expired_keys:
        await ctx.send("‚úÖ Kh√¥ng c√≥ key n√†o h·∫øt h·∫°n!")
        return
    
    new_data = []
    expired_count = 0
    
    for key in current_data:
        if key.get('expires'):
            expiry_date = datetime.datetime.fromisoformat(key['expires'].replace('Z', ''))
            if expiry_date >= datetime.datetime.utcnow():
                new_data.append(key)
            else:
                expired_count += 1
        else:
            new_data.append(key)
    
    embed = discord.Embed(title="‚ö†Ô∏è X√ìA KEY H·∫æT H·∫†N", color=0xffa500)
    embed.add_field(name="S·ªë key s·∫Ω x√≥a", value=f"**{expired_count}** keys", inline=False)
    embed.add_field(name="S·ªë key s·∫Ω gi·ªØ l·∫°i", value=f"**{len(new_data)}** keys", inline=False)
    
    expired_list = "\n".join([f"`{key['key']}` - {key['type']}" for key in expired_keys[:5]])
    if len(expired_keys) > 5:
        expired_list += f"\n... v√† {len(expired_keys) - 5} keys kh√°c"
    
    embed.add_field(name="Key h·∫øt h·∫°n", value=expired_list, inline=False)
    embed.add_field(name="X√°c nh·∫≠n", value="React v·ªõi ‚úÖ ƒë·ªÉ x√≥a, ‚ùå ƒë·ªÉ h·ªßy", inline=False)
    
    confirm_msg = await ctx.send(embed=embed)
    await confirm_msg.add_reaction("‚úÖ")
    await confirm_msg.add_reaction("‚ùå")
    
    def check(reaction, user):
        return user == ctx.author and str(reaction.emoji) in ["‚úÖ", "‚ùå"] and reaction.message.id == confirm_msg.id
    
    try:
        reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=check)
        
        if str(reaction.emoji) == "‚úÖ":
            if await manager.update_json(new_data):
                embed_success = discord.Embed(title="‚úÖ X√≥a Key H·∫øt H·∫°n Th√†nh C√¥ng", color=0x00ff00)
                embed_success.add_field(name="ƒê√£ x√≥a", value=f"**{expired_count}** keys h·∫øt h·∫°n", inline=True)
                embed_success.add_field(name="C√≤n l·∫°i", value=f"**{len(new_data)}** keys", inline=True)
                await confirm_msg.edit(embed=embed_success)
                await confirm_msg.clear_reactions()
            else:
                await ctx.send("‚ùå L·ªói khi x√≥a key h·∫øt h·∫°n!")
        else:
            embed_cancel = discord.Embed(title="‚ùå ƒê√£ H·ªßy", color=0xff0000)
            embed_cancel.add_field(name="Thao t√°c", value="ƒê√£ h·ªßy x√≥a key h·∫øt h·∫°n", inline=False)
            await confirm_msg.edit(embed=embed_cancel)
            await confirm_msg.clear_reactions()
            
    except asyncio.TimeoutError:
        embed_timeout = discord.Embed(title="‚è∞ H·∫øt Gi·ªù", color=0xffa500)
        embed_timeout.add_field(name="Thao t√°c", value="ƒê√£ h·∫øt th·ªùi gian x√°c nh·∫≠n", inline=False)
        await confirm_msg.edit(embed=embed_timeout)
        await confirm_msg.clear_reactions()

# ===============================
# üîë K√çCH HO·∫†T KEY
# ===============================

@bot.command()
@is_admin()
async def kichhoat(ctx, key: str, hwid: str):
    """K√≠ch ho·∫°t key single v·ªõi HWID"""
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    key_found = False
    for k in current_data:
        if k['key'] == key:
            if k['type'] != 'single':
                await ctx.send("‚ùå Key n√†y kh√¥ng ph·∫£i lo·∫°i single!")
                return
            
            k['hwid'] = hwid
            key_found = True
            break
    
    if not key_found:
        await ctx.send("‚ùå Key kh√¥ng t·ªìn t·∫°i!")
        return
    
    if await manager.update_json(current_data):
        embed = discord.Embed(title="‚úÖ K√≠ch Ho·∫°t Th√†nh C√¥ng", color=0x00ff00)
        embed.add_field(name="Key", value=f"`{key}`", inline=False)
        embed.add_field(name="HWID", value=f"`{hwid}`", inline=False)
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå L·ªói khi k√≠ch ho·∫°t key!")

# ===============================
# üìä DANH S√ÅCH & TH·ªêNG K√ä
# ===============================

@bot.command()
@is_admin()
async def danhsachkey(ctx, page: int = 1):
    """Hi·ªÉn th·ªã danh s√°ch FULL t·∫•t c·∫£ keys (ph√¢n trang)"""
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    if not current_data:
        await ctx.send("üì≠ Kh√¥ng c√≥ key n√†o trong h·ªá th·ªëng!")
        return
    
    items_per_page = 10
    total_pages = (len(current_data) + items_per_page - 1) // items_per_page
    
    if page < 1 or page > total_pages:
        await ctx.send(f"‚ùå Trang kh√¥ng h·ª£p l·ªá! Ch·ªçn t·ª´ 1 ƒë·∫øn {total_pages}")
        return
    
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    page_data = current_data[start_idx:end_idx]
    
    embed = discord.Embed(
        title=f"üìã DANH S√ÅCH T·∫§T C·∫¢ KEYS (Trang {page}/{total_pages})", 
        color=0x0099ff
    )
    
    for i, key in enumerate(page_data, start=start_idx + 1):
        status = "‚úÖ ƒê√£ k√≠ch ho·∫°t" if key['hwid'] else "‚è≥ Ch∆∞a k√≠ch ho·∫°t"
        
        if key.get('unlimited'):
            expiry_info = "‚ôæÔ∏è Vƒ©nh vi·ªÖn"
        elif key.get('expires'):
            expiry_date = datetime.datetime.fromisoformat(key['expires'].replace('Z', ''))
            days_left = (expiry_date - datetime.datetime.utcnow()).days
            if days_left > 0:
                expiry_info = f"üü¢ {days_left} ng√†y"
            else:
                expiry_info = "üî¥ H·∫øt h·∫°n"
        else:
            expiry_info = "‚ùì Kh√¥ng x√°c ƒë·ªãnh"
        
        embed.add_field(
            name=f"#{i} - `{key['key']}`",
            value=f"**Lo·∫°i:** {key['type']}\n**Tr·∫°ng th√°i:** {status}\n**H·∫°n s·ª≠ d·ª•ng:** {expiry_info}",
            inline=False
        )
    
    single_keys = [k for k in current_data if k['type'] == 'single']
    multi_keys = [k for k in current_data if k['type'] == 'multi']
    unlimited_keys = [k for k in current_data if k.get('unlimited')]
    expired_keys = manager.get_expired_keys(current_data)
    
    embed.set_footer(text=f"üîê Single: {len(single_keys)} | üë• Multi: {len(multi_keys)} | ‚ôæÔ∏è Unlimited: {len(unlimited_keys)} | üî¥ H·∫øt h·∫°n: {len(expired_keys)} | üìä T·ªïng: {len(current_data)}")
    
    message = await ctx.send(embed=embed)
    
    if total_pages > 1:
        await message.add_reaction("‚¨ÖÔ∏è")
        await message.add_reaction("‚û°Ô∏è")
        
        def check(reaction, user):
            return (user == ctx.author and 
                   str(reaction.emoji) in ["‚¨ÖÔ∏è", "‚û°Ô∏è"] and 
                   reaction.message.id == message.id)
        
        try:
            reaction, user = await bot.wait_for('reaction_add', timeout=30.0, check=check)
            
            if str(reaction.emoji) == "‚û°Ô∏è" and page < total_pages:
                await message.delete()
                await danhsachkey(ctx, page + 1)
            elif str(reaction.emoji) == "‚¨ÖÔ∏è" and page > 1:
                await message.delete()
                await danhsachkey(ctx, page - 1)
            else:
                await message.clear_reactions()
                
        except asyncio.TimeoutError:
            await message.clear_reactions()

@bot.command()
@is_admin()
async def thongke(ctx):
    """Ch·ªâ hi·ªÉn th·ªã s·ªë l∆∞·ª£ng t·ª´ng lo·∫°i key (ƒë∆°n gi·∫£n)"""
    manager = KeyManager(GITHUB_TOKEN, GITHUB_REPO)
    current_data = await manager.get_current_json()
    
    if not current_data:
        await ctx.send("üì≠ Kh√¥ng c√≥ key n√†o trong h·ªá th·ªëng!")
        return
    
    single_keys = [k for k in current_data if k['type'] == 'single']
    multi_keys = [k for k in current_data if k['type'] == 'multi']
    unlimited_keys = [k for k in current_data if k.get('unlimited')]
    expired_keys = manager.get_expired_keys(current_data)
    
    embed = discord.Embed(title="üìà Th·ªëng K√™ Lo·∫°i Key", color=0x00ff00)
    embed.add_field(name="üîê Single Keys", value=f"**{len(single_keys)}** keys", inline=True)
    embed.add_field(name="üë• Multi Keys", value=f"**{len(multi_keys)}** keys", inline=True)
    embed.add_field(name="‚ôæÔ∏è Unlimited Keys", value=f"**{len(unlimited_keys)}** keys", inline=True)
    embed.add_field(name="üî¥ Key H·∫øt H·∫°n", value=f"**{len(expired_keys)}** keys", inline=True)
    embed.add_field(name="üìä T·ªïng C·ªông", value=f"**{len(current_data)}** keys", inline=True)
    
    await ctx.send(embed=embed)

# ===============================
# üìã MENU & HELP
# ===============================

@bot.command()
@is_admin()
async def menu(ctx):
    """Hi·ªÉn th·ªã t·∫•t c·∫£ l·ªánh c√≥ s·∫µn"""
    try:
        # Embed 1: L·ªánh t·∫°o v√† qu·∫£n l√Ω key
        embed1 = discord.Embed(
            title="üõ†Ô∏è MENU L·ªÜNH QU·∫¢N L√ù KEY - PH·∫¶N 1", 
            description="**L·ªÜNH T·∫†O V√Ä QU·∫¢N L√ù KEY**",
            color=0x7289da
        )
        
        embed1.add_field(
            name="üéØ **L·ªÜNH T·∫†O KEY:**",
            value="`!taokey <type> <amount> [days]`\nT·∫°o key t√πy ch·ªçn (single/multi/unlimited)",
            inline=False
        )
        
        embed1.add_field(
            name="üîß **L·ªÜNH QU·∫¢N L√ù KEY:**",
            value=(
                "`!xoakey <key1> <key2> ...` - X√≥a m·ªôt ho·∫∑c nhi·ªÅu key\n"
                "`!xoakeyhethan` - X√≥a t·∫•t c·∫£ key ƒë√£ h·∫øt h·∫°n\n"
                "`!kichhoat <key> <hwid>` - K√≠ch ho·∫°t key single v·ªõi HWID\n"
                "`!resetHWID <key>` - Reset HWID cho key (user ƒë·ªïi m√°y)\n"
                "`!giahankey <key> <s·ªë_ng√†y>` - Gia h·∫°n th√™m ng√†y cho key"
            ),
            inline=False
        )
        
        await ctx.send(embed=embed1)
        
        # Embed 2: L·ªánh admin v√† th·ªëng k√™
        embed2 = discord.Embed(
            title="üõ†Ô∏è MENU L·ªÜNH QU·∫¢N L√ù KEY - PH·∫¶N 2", 
            description="**L·ªÜNH QU·∫¢N L√ù ADMIN & TH·ªêNG K√ä**",
            color=0x7289da
        )
        
        embed2.add_field(
            name="üë• **L·ªÜNH QU·∫¢N L√ù ADMIN:**",
            value=(
                "`!themuser <user_id>` - Th√™m user v√†o danh s√°ch admin\n"
                "`!xoauser <user_id>` - X√≥a user kh·ªèi danh s√°ch admin\n"
                "`!danhsachuser` - Xem danh s√°ch admin"
            ),
            inline=False
        )
        
        embed2.add_field(
            name="üìä **L·ªÜNH XEM TH·ªêNG K√ä:**",
            value=(
                "`!danhsachkey [page]` - Xem danh s√°ch FULL keys (ph√¢n trang)\n"
                "`!thongke` - Xem nhanh s·ªë l∆∞·ª£ng t·ª´ng lo·∫°i key\n"
                "`!menu` - Hi·ªÉn th·ªã menu n√†y\n"
                "`!help` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"
            ),
            inline=False
        )
        
        embed2.add_field(
            name="üìù **C√ÅCH S·ª¨ D·ª§NG:**",
            value=(
                "**<tham_s·ªë>** - Tham s·ªë b·∫Øt bu·ªôc\n"
                "**[tham_s·ªë]** - Tham s·ªë t√πy ch·ªçn\n"
                "**type** - single, multi, unlimited\n"
                "**amount** - S·ªë l∆∞·ª£ng key c·∫ßn t·∫°o\n"
                "**days** - S·ªë ng√†y s·ª≠ d·ª•ng (m·∫∑c ƒë·ªãnh: 30)"
            ),
            inline=False
        )
        
        embed2.set_footer(text="ü§ñ Bot Qu·∫£n L√Ω Key - GitHub Integration | üöÑ Railway 24/7")
        await ctx.send(embed=embed2)
        
    except Exception as e:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã menu: {str(e)}")

@bot.command()
async def help(ctx):
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    try:
        embed = discord.Embed(
            title="üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG BOT", 
            description="H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·ª≠ d·ª•ng c√°c l·ªánh qu·∫£n l√Ω key",
            color=0x7289da
        )
        
        embed.add_field(
            name="üéØ **T·∫†O KEY:**",
            value=(
                "`!taokey single 1 30` - T·∫°o 1 key single 30 ng√†y\n"
                "`!taokey multi 5 60` - T·∫°o 5 key multi 60 ng√†y\n"
                "`!taokey unlimited 3` - T·∫°o 3 key unlimited"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß **QU·∫¢N L√ù KEY:**",
            value=(
                "`!xoakey ABC123` - X√≥a 1 key\n"
                "`!xoakey ABC123 DEF456` - X√≥a nhi·ªÅu key c√πng l√∫c\n"
                "`!resetHWID ABC123` - Reset HWID khi user ƒë·ªïi m√°y\n"
                "`!giahankey ABC123 30` - Gia h·∫°n th√™m 30 ng√†y\n"
                "`!kichhoat ABC123 HWID123` - K√≠ch ho·∫°t key v·ªõi HWID\n"
                "`!xoakeyhethan` - X√≥a key h·∫øt h·∫°n"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üë• **QU·∫¢N L√ù ADMIN:**",
            value=(
                "`!themuser 123456789` - Th√™m admin m·ªõi\n"
                "`!xoauser 123456789` - X√≥a admin\n"
                "`!danhsachuser` - Xem danh s√°ch admin"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìä **XEM TH·ªêNG K√ä:**",
            value=(
                "`!danhsachkey` - Xem danh s√°ch FULL keys\n"
                "`!thongke` - Xem th·ªëng k√™ nhanh\n"
                "`!menu` - Xem menu ƒë·∫ßy ƒë·ªß"
            ),
            inline=False
        )
        
        embed.set_footer(text="ü§ñ S·ª≠ d·ª•ng !menu ƒë·ªÉ xem t·∫•t c·∫£ l·ªánh | üöÑ Railway 24/7")
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã help: {str(e)}")

# ===============================
# ‚ö†Ô∏è X·ª¨ L√ù L·ªñI
# ===============================

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.send("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå Thi·∫øu tham s·ªë! S·ª≠ d·ª•ng `!menu` ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")
    elif isinstance(error, commands.BadArgument):
        await ctx.send("‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng `!menu` ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")
    else:
        await ctx.send("‚ùå ƒê√£ x·∫£y ra l·ªói! Vui l√≤ng th·ª≠ l·∫°i.")
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {error}")

# ===============================
# üöÄ CH·∫†Y BOT
# ===============================
if __name__ == "__main__":
    print("üöÄ ƒêang kh·ªüi ƒë·ªông Bot Discord...")
    print("üöÑ K√≠ch ho·∫°t ch·∫ø ƒë·ªô Railway 24/7...")
    try:
        bot.run(DISCORD_TOKEN)
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·∫°y bot: {e}")
